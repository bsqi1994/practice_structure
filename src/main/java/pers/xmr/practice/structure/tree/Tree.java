package pers.xmr.practice.structure.tree;

/**
 * @author xmr
 * @date 2019/11/28 15:44
 * @description 树和二叉树
 */
public class Tree {
    /*
        树是n个节点的有限集
        节点的度与树的度
        结点拥有的子树的数目称为节点的度

        度为0的节点称为叶子或终端节点
        度不为0的节点称为非终端节点或分支节点,除根之外的分支节点称为内部节点
        树内各节点的度的最大值称为树的度
        树中节点的最大层数称为树的深度
        有序树 : 树中节点的各子树从左到右是有次序的
        m叉树: 每个节点最多分叉的次数
        森林是m(m>=0)棵互不相交的树的集合
        删去一颗树的根,就变成森林
        父亲 : 一个节点的直接前驱节点
        儿子 : 一个节点的直接后继节点
        兄弟 : 同一个父亲节点的其他节点

        二叉树 : 每个节点的度均不超过2的有序树,称为二叉树
        每个节点的孩子数只能是0,1,2,并且孩子有左右之分

        满二叉树 : 高度为k并且有2(k+1) - 1个结点的二叉树
        1,2,4,8....
        完全二叉树 :
        在一棵满二叉树中,在最下层从最右侧起去掉相邻的若干叶子节点,得到的二叉树为完全二叉树

        满二叉树必为完全二叉树,完全二叉树不一定为满二叉树

        二叉树的性质:
        性质1 : 在二叉树的第i层上最多有2(i-1)个结点(以根作为第一层)
        性质2: 高度为h的二叉树至多有2(h) - 1个结点
        性质3: 对任何一棵二叉树T,如果其终端节点数为n0,度为2的节点数为n2,则n0 = n2 + 1

        二叉树的存储结构 : 顺序存储结构,链式存储结构

        顺序存储结构 : 完全二叉树
        但是在存储一般的二叉树会造成空间浪费(否则将无法确定结点之前的前驱后继关系)

        链式存储结构 :
     */
}
