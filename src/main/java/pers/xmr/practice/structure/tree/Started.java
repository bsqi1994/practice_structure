package pers.xmr.practice.structure.tree;

/**
 * @author xmr
 * @date 2019/11/23 8:43
 * @description 数据结构与算法入门
 */
public class Started {
    /*
        数据 : 描述客观事物的数值
        数据项 : 具有原子性,不可分割的最小数据单位(例如学生的姓名,学生的年龄)
        数据元素 : 数据的基本单位,数据集合的个体,由若干个数据项组成,在计算机程序一般当做一个整体处理(一個學生的全部信息)
        数据对象 : 性质相同的数据元素的集合,数据的子集(一个班级的全部学生)
        数据结构 : 相互之间存在一种或多种特定关系的数据元素的集合
        数据结构 = 逻辑结构 + 存储结构 + (在存储结构上的) 运算/操作
        逻辑结构 : 线性(线性表,栈,队列)
                   非线性(树形.图形)
        存储结构(顺序存储,链式存储,索引存储,散列存储)
        数据的运算: 检索,排序,插入,删除,修改
     */

    /*
        数据逻辑结构 : 数据之间的逻辑关系(和实现无关)
        第一种分类方式:
        线性结构: 有且只有一个起始点和终结点,所有节点最多只有一个直接前驱和直接后继
        包括 : 线性表,栈,队列
        非线性结构: 一个节点元素可能对应多个直接前驱和直接后继
        树,图

        分类二 :

        集合结构 : 确定,无序,唯一(HashSet)
        线性结构
        树状结构 : 除了第一个元素,每个数据元素只有一个直接前驱,但是可以有多个直接后继
        网络结构 : 每个数据之间可以有多个直接前驱,也可以有多个直接后驱
     */

    /*
        数据存储结构
        数据的存储结构主要包括数据元素本身的存储以及数据元素之间的关系表示,是数据的逻辑结构在计算机中的表示
        顺序存储结构 : 把逻辑上相邻的节点存储在物理位置相邻存储元素中(数组,插入删除效率低下)
        链式存储结构 : 数组存储对应的是不连续的存储空间,每个存储节点对应一个需要存储的数据元素(查询效率低下)
        索引存储结构 : 除建立存储节点信息外,还建立附加的索引表来标识结点的地址
        散列存储结构(Hash) : 根据节点的关键字直接计算出该节点的存储地址(添加,查询速度快)
     */

    /*
         算法 : 是指令的集合,是为解决特定问题而规定的一系列操作
         输入,以解决问题的信息作为输入
         输出,
         可行性,算法中的指令是可以实现的,能在有限的时间内完成
         有穷性,指令个数有限
         确定性.多次执行算法,结果一致
     */

    /*
        算法的复杂性体现在运行该算法是的计算机所需资源的多少上,计算机最终要的是时间和空间资源,因此分为时间复杂度和空间复杂度
        时间复杂度执行算法所需要的计算工作量
        时间频度 :
        一个算法锁花费的时间与算繁重语句的执行次数成正比,算法中语句执行次数多,花费时间就长
        一个算法中的语句执行次数成为语句频度或时间频度,表示为T(n), n表示问题的规模

        时间复杂度
        如果我们想知道算法变化呈现什么规律,想知道问题的规模,而不是具体的次数,因此引入时间复杂度
        若有某个辅助函数f(n),当n趋近于无穷大时 T(n)/f(n)的极限值为不等于零的常数,称f(n)是T(n)的同数量级函数
        记做T(n)=O(f(n)),成O(f(n))为算法的渐进时间复杂度,简称时间复杂度
        时间复杂度就是时间频度去掉低阶项和首项常数

        Ο最坏时间复杂度
        Ω最好时间复杂度
        Θ 算法时间复杂度的精确阶(最好和最快是同一阶)
        空间复杂度执行这个算法所需要的内存空间
     */
}
